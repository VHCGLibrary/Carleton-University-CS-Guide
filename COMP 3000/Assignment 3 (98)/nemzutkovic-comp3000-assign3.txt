COMP 3000 Assignment 3
Nemanja (Nem) Zutkovic
101085982
March 26, 2019

Collaborator: Will Mahler

Resources Used:
Q1: Lecture 15
Q2: Lecture 15 (44:00)
    https://elixir.bootlin.com/linux/latest/source/kernel/sys.c
Q3: Lecture 15 (23:30)
Q4: https://unix.stackexchange.com/questions/138342/how-to-read-write-to-tty-device / Anil Re: Forums
Q5: https://unix.stackexchange.com/questions/115489/sys-class-filesystem-on-linux
Q6: https://www.fsl.cs.sunysb.edu/kernel-api/re256.html
    https://www.fsl.cs.sunysb.edu/kernel-api/re257.html
    https://elixir.bootlin.com/linux/latest/source/include/linux/uaccess.h#L141
    https://elixir.bootlin.com/linux/v4.7/source/include/uapi/asm-generic/errno-base.h#L17
Q7: https://www.apriorit.com/dev-blog/195-simple-driver-for-linux-os
Q8: https://elixir.bootlin.com/linux/v5.0.3/source/drivers/pci/hotplug/cpqphp_sysfs.c#L154
    https://sites.google.com/site/linuxkernel88/sample-code/writing-a-character-driver



1. Reason 1: Linux kernel code doesn't make system calls because system calls are made in userspace by processes, to the kernel.
   Reason 2: The Linux kernel code is responsible for implementing system calls (SYSCALL_DEFINEN) which are made by processes.



2. We would use the following code:
   SYSCALL_DEFINE0(getuid)
   {
	/* Only we change this so SMP safe */
	return from_kuid_munged(current_user_ns(), current_uid());
   }

   SYSCALL_DEFINE0(geteuid)
   {
	/* Only we change this so SMP safe */
	return from_kuid_munged(current_user_ns(), current_euid());
   }

   I know this code is correct because it was found in /kernel/sys.c, and these are the implementations of the getuid() and geteuid() system calls.
   I also know this code is correct because if you implement it, print out the information, and compare it to userspace generated values, the values will be the same.

####################
MODULE MODIFICATIONS
####################

*** remember.c  2019-03-24 23:39:56.572000000 -0400
--- rememberog.c        2019-03-22 16:12:05.708000000 -0400
***************
*** 188,200 ****

          pr_info("Remember: device registered using major %d.\n",
                  remember_major);
!
!         int uid  = from_kuid_munged(current_user_ns(), current_uid());
!         int euid = from_kuid_munged(current_user_ns(), current_euid());
!
!         pr_info("UID:  %d\n", uid);
!         pr_info("EUID: %d\n", euid);
!
          return 0;

   failed_devreg:
--- 188,194 ----

          pr_info("Remember: device registered using major %d.\n",
                  remember_major);
!
          return 0;

   failed_devreg:

################
TESTING & OUTPUT
################

If you run the module with the modifications, the UID and EUID will be printed out:
Mar 24 23:25:35 COMPXXXX kernel: [178001.373827] UID:  1000
Mar 24 23:25:35 COMPXXXX kernel: [178001.373829] EUID: 1000

If you compare the values generated from the kernel code to the values of id -u (shows EUID) and id -u -r (shows UID) entered as a shell command (shown below), you will get the same values:

student@COMPXXXX:~/Assignments/A3$ id -u
1000
student@COMPXXXX:~/Assignments/A3$ id -u -r
1000



3. No, the kernel cannot automatically deallocate the resources used by the module when it is unloaded. In contrast to the memory allocated in userspace,
   the kernel has to clean up after itself and free its' own memory. If the kernel does not deallocate the memory it allocated for itself,
   the memory will be allocated as long as the system is running. This is not good. Further proof of this dellaction process is seen in the modules we worked with during the tutorials.
   In the __exit functions, any saved data was freed, and devices/classes were destroyed and unregistered.



4. When the remember module is removed while a process is accessing it, the kernel gets corrupted, and as a byproduct the process becomes unkillable and usable. 
   In addition to this, the process never finishes executing, current shell becomes unusable and a new session must be started. 
   Here is my test program and output as proof:

###############
TESTING PROGRAM
###############

#include <stdlib.h>
#include <stdio.h>
#include <fcntl.h>

int main() {

        if (len < saved_data_len) {
                copy_to_user(buf, saved_data, len);
                return len;
        }

        printf("Process started...\n");
        printf("Loading module...\n");
        system("sudo insmod remember.ko");
        printf("Module loaded successfully.\n");

        printf("First ps output:\n");
        system("ps");

        printf("Opening remember module for reading/writing...\n");
        int fd = open("/dev/remember", O_RDWR);
        printf("Module opened successfully.\n");

        printf("Removing module...\n");
        system("sudo rmmod remember.ko");                            <----This is where the kernel gets corrupted and the process/shell become unusable.

        printf("Module removed successfully.\n");                    <----Anything from here and below does not get executed.

        printf("Second ps output:\n");
        system("ps");

        printf("Process ended.\n");

        return 0;
}

######
OUTPUT
######

Process started...
Loading module...
[sudo] password for student:
Module loaded successfully.
First ps output:
  PID TTY          TIME CMD
13213 pts/2    00:00:00 bash
13971 pts/2    00:00:00 q4test
13985 pts/2    00:00:00 sh
13986 pts/2    00:00:00 ps
Opening remember module for reading/writing...
Module opened successfully.
Removing module...



5. You will get an error message that will prevent you from inserting the module. I came to this answer, by first looking to see where class_create() was called and it was in remember_init():
   
   Line 169: remember_class = class_create(THIS_MODULE, CLASS_NAME);
   
   Then I noticed CLASS_NAME was being passed into class_create() and looked to see where CLASS_NAME was defined and it was defined right under the included linux header files:

   Line 29: #define CLASS_NAME "comp3000"

   From there, I wanted to find a list of the already existing class names and that was found in /sys/class: 

student@COMPXXXX:~/Assignments/A3$ ls /sys/class
ata_device  block          dma             firmware    hwmon        leds      nd       powercap      regulator    scsi_generic  tpm           vtconsole
ata_link    bsg            dmi             gpio        i2c-adapter  mdio_bus  net      power_supply  rfkill       scsi_host     tpmrm         watchdog
ata_port    devcoredump    drm             graphics    i2c-dev      mem       pci_bus  ppp           rtc          spi_master    tty
backlight   devfreq        drm_dp_aux_dev  hidraw      input        misc      pci_epc  pwm           scsi_device  spi_slave     vc
bdi         devfreq-event  extcon          hmm_device  iommu        mmc_host  phy      rapidio_port  scsi_disk    thermal       virtio-ports


   I redefined CLASS_NAME to an already existing class, and then noticed the error when inserting the module.

####################
MODULE MODIFICATIONS
####################

*** remember5.c 2019-03-22 16:20:46.716000000 -0400
--- rememberoriginal.c  2019-03-22 16:12:05.708000000 -0400
***************
*** 26,32 ****
  #include <linux/mm.h>

  #define DEVICE_NAME "remember"
! #define CLASS_NAME "misc"

  static struct class* remember_class = NULL;
  static struct device* remember_device = NULL;
--- 26,32 ----
  #include <linux/mm.h>

  #define DEVICE_NAME "remember"
! #define CLASS_NAME "comp3000"

  static struct class* remember_class = NULL;
  static struct device* remember_device = NULL;

################
TESTING & OUTPUT
################

student@COMPXXXX:~/Assignments/A3$ sudo insmod remember.ko
insmod: ERROR: could not insert module remember.ko: Operation not permitted



6. The process to which I figured out by answer:
   I needed to get a better understanding of the code so I had to look up a few of the kernel functions, in particular, copy_to_user() and copy_from_user().
   In remember_read(), copy_to_user() copies data from kernel space to user space, and in remember_write(), copy_from_user() copies data from user space to kernel space.
   Both of these functions need to return values that are greater than or equal to 0.
   I then looked into the kernel implementations of the two functions (https://elixir.bootlin.com/linux/latest/source/include/linux/uaccess.h#L141) and realized a quick if statement checking the return values would be effective in the read/write calls.
   After adding in the if statements, the simplest way to test this implementation was by hardcoding a value to buf, to (buf = -1).

####################
MODULE MODIFICATIONS
####################

*** remember.c  2019-03-25 01:04:46.292000000 -0400
--- rememberog.c        2019-03-22 16:12:05.708000000 -0400
***************
*** 68,78 ****
          } else {
                  pr_info("Remember: read returning data, %ld bytes\n",
                          saved_data_len);
!
!               if (copy_to_user(buf, saved_data, saved_data_len)) {      <----Pass in -1 or NULL as the buf to test for -EFAULT.
!                       return -EFAULT;
!               }
!
                  *offset = saved_data_len;

                  return saved_data_len;
--- 68,74 ----
          } else {
                  pr_info("Remember: read returning data, %ld bytes\n",
                          saved_data_len);
!                 copy_to_user(buf, saved_data, saved_data_len);
                  *offset = saved_data_len;

                  return saved_data_len;
***************
*** 128,140 ****
          }

          pr_info("Remember: write saving data, %ld bytes", len);
-
-       result = copy_from_user(saved_data, buf, len);
-
-       if (result){                                                  
-               return -EFAULT;                                      
-       }

          saved_data_len = len;

          *offset = len;
--- 124,131 ----
          }

          pr_info("Remember: write saving data, %ld bytes", len);

+         result = copy_from_user(saved_data, buf, len);                 <----Pass in -1 or NULL as the buf to test for -EFAULT.
          saved_data_len = len;

          *offset = len;

################
TESTING & OUTPUT
################

To test, pass in -1 or NULL as the buf in remember_write() and the following/appropriate error appears:

student@COMPXXXX:~/Assignments/A3$ echo "Hello World" > /dev/remember
-bash: echo: write error: Bad address

To test, pass in -1 or NULL as the buf in remember_read() and the following/appropriate error appears:

student@COMPXXXX:~/Assignments/A3$ echo "Hello" > /dev/remember
student@COMPXXXX:~/Assignments/A3$ cat /dev/remember
cat: /dev/remember: Bad address

Alternatively, use the [edited] professor's testing program:

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include <sys/stat.h>
#include <fcntl.h>

int open_remember(void) {
        int fd = open("/dev/remember", O_RDWR);
        if (fd < 0) {
                fprintf(stderr, "Could not open the remember device.\n");
                exit(-1);
        }
        return fd;
}


void read_test(void)
{
        int fd = open_remember();
        ssize_t c = read(fd, -1, 1024);

        if (c >= 0) {
                printf("read with -1 buffer succeeded\n");
        } else {
                perror("Error reading remember in -1  buffer test");
        }

        c = read(fd, NULL, 1024);
        if (c >= 0) {
                printf("read with NULL buffer succeeded\n");
        } else {
                perror("Error reading remember in NULL  buffer test");
        }
        close(fd);
}

void write_test(void)
{
        int fd = open_remember();
        ssize_t c = write(fd, -1, 1024);

        if (c >= 0) {
                printf("write with -1 buffer succeeded\n");
        } else {
                perror("Error writing remember in -1  buffer test");
        }


        c = read(fd, NULL, 1024);
        if (c >= 0) {
                printf("write with NULL buffer succeeded\n");
        } else {
                perror("Error writing remember in NULL  buffer test");
        }
        close(fd);
}

int main(int argc, char *argv)
{
        read_test();
        write_test();
        return 0;
}

and this will be your return:

student@COMPXXXX:~/Assignments/A3$ ./test
Error reading remember in -1  buffer test: Bad address
Error reading remember in NULL  buffer test: Bad address
Error writing remember in -1  buffer test: Bad address
Error writing remember in NULL  buffer test: Bad address



7. Here is the modified remember_read() where it updates the offset after each read call:

####################
MODULE MODIFICATIONS 
####################

*** remember7.c 2019-03-23 15:02:56.960000000 -0400
--- rememberoriginal.c  2019-03-22 16:12:05.708000000 -0400
***************
*** 45,66 ****
  }

  static ssize_t remember_read(struct file *f, char *buf, size_t len, loff_t *offset)
! {
!       if (*offset >= saved_data_len) {
!               return 0;
!       }
!
!       if (*offset + len > saved_data_len) {
!               len = saved_data_len - *offset;
!       }

!       if (copy_to_user(buf, saved_data + *offset, len) != 0) {
!               return -EFAULT;
!       }

!       *offset += len;
!
!       return len;
  }

  void init_saved_data(void)
--- 45,78 ----
  }

  static ssize_t remember_read(struct file *f, char *buf, size_t len, loff_t *offset)
! {
!         unsigned long n;
!         char *error_msg = "Buffer too small.";
!
!         pr_info("Remember: read started\n");
!
!         if (*offset > 0) {
!                 pr_info("Remember: read non-zero offset, aborting\n");
!                 return 0;
!         }

!         if (len < saved_data_len) {
!                 pr_info("Remember: read short buffer\n");
!                 n = strlen(error_msg) + 1;  // Include terminating null byte
!                 if (n > len) {
!                         n = len;
!                 }
!                 copy_to_user(buf, error_msg, n);
!
!                 return n;
!         } else {
!                 pr_info("Remember: read returning data, %ld bytes\n",
!                         saved_data_len);
!                 copy_to_user(buf, saved_data, saved_data_len);
!                 *offset = saved_data_len;

!                 return saved_data_len;
!         }
  }

################
TESTING & OUTPUT
################

By adjusting the offset in remember_read() to a higher value, on the first read call like so:

    if (*offset == 0){
        *offset = 3;
    }

You will be able to test if remember_read() uses a non-zero offset properly. Here is the testing output:

student@COMPXXXX:~/Assignments/A3$ echo "Hello World" > /dev/remember
student@COMPXXXX:~/Assignments/A3$ cat /dev/remember
lo World



8. Assuming you have kept the modifications from the previous question, to implement remember_lseek() the following modifcations must be made:

####################
MODULE MODIFICATIONS 
####################

*** rememberog.c        2019-03-22 16:12:05.708000000 -0400
--- remember.c  2019-03-26 19:38:43.904000000 -0400
***************
*** 46,78 ****

  static ssize_t remember_read(struct file *f, char *buf, size_t len, loff_t *offset)
  {
!         unsigned long n;
!         char *error_msg = "Buffer too small.";
!
!         pr_info("Remember: read started\n");
!
!         if (*offset > 0) {
!                 pr_info("Remember: read non-zero offset, aborting\n");
!                 return 0;
!         }
!
!         if (len < saved_data_len) {
!                 pr_info("Remember: read short buffer\n");
!                 n = strlen(error_msg) + 1;  // Include terminating null byte
!                 if (n > len) {
!                         n = len;
!                 }
!                 copy_to_user(buf, error_msg, n);
!
!                 return n;
!         } else {
!                 pr_info("Remember: read returning data, %ld bytes\n",
!                         saved_data_len);
!                 copy_to_user(buf, saved_data, saved_data_len);
!                 *offset = saved_data_len;
!
!                 return saved_data_len;
!         }
  }

  void init_saved_data(void)
--- 46,59 ----

  static ssize_t remember_read(struct file *f, char *buf, size_t len, loff_t *offset)
  {
!         if (*offset >= saved_data_len)
!               return 0;
!         if (*offset + len > saved_data_len)
!               len = saved_data_len - *offset;
!         if (copy_to_user(buf, saved_data + *offset, len))
!               return -EFAULT;
!         *offset += len;
!         return len;
  }

  void init_saved_data(void)
***************
*** 124,131 ****
          }

          pr_info("Remember: write saving data, %ld bytes", len);

-         result = copy_from_user(saved_data, buf, len);
          saved_data_len = len;

          *offset = len;
--- 105,117 ----
          }

          pr_info("Remember: write saving data, %ld bytes", len);
+
+       result = copy_from_user(saved_data, buf, len);
+
+       if (result){
+               return -EFAULT;
+       }

          saved_data_len = len;

          *offset = len;
***************
*** 133,138 ****
--- 119,145 ----
          return len;
  }

+ static loff_t remember_lseek(struct file *f, loff_t offset, int whence){
+       loff_t position = 0;
+
+       if (whence == 0)
+               position = offset;
+       else if (whence == 1)
+               position = f->f_pos + offset;
+       else
+               return -1;
+
+         if (position > saved_data_max)
+               position = saved_data_max;
+
+         if (position < 0)
+               position = 0;
+
+       f->f_pos = position;
+
+       return position;
+ }
+
  static int remember_release(struct inode *the_inode, struct file *f)
  {
          pr_info("Remember: device closed\n");
***************
*** 145,150 ****
--- 152,158 ----
          .read = remember_read,
          .write = remember_write,
          .release = remember_release,
+         .llseek = remember_lseek,
  };

################
TESTING & OUTPUT
################

Here is the testing code which was inspired off the professor's test program:

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include <sys/stat.h>
#include <fcntl.h>

...Omitting open_remember(), read_test(), write_test()...

void llseek_test(void)
{
       char buff1[50];
       char buff2[50];

       system("echo abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ > /dev/remember");

       int fd = open_remember();

       lseek(fd, 3, SEEK_SET);
       int c = read(fd, buff1, 1024);
       printf("%s", buff1);               <----------Should print the letter 'k', onward.

       lseek(fd, 0, SEEK_SET);
       lseek(fd, 4, SEEK_CUR);
       lseek(fd, 1, SEEK_CUR);

       c = read(fd, buff2, 1024);

       printf("%s", buff2);               <----------Should print the letter 'f', onward.

       close(fd);
}

int main(int argc, char *argv)
{
        llseek_test();
        return 0;
}

And here is the userspace output, after running the test program:

student@COMPXXXX:~/Assignments/A3$ ./test
klmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
fghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ



9A. Here is the modified remember module to allocate 16K of storage along with the print statement that shows the new storage size:

####################
MODULE MODIFICATIONS
####################

*** remember.c  2019-03-23 20:53:29.636000000 -0400
--- remember9a.c        2019-03-23 20:53:09.876000000 -0400
***************
*** 36,42 ****
  static char *saved_data = NULL;
  static unsigned long saved_data_len = 0;
  static int saved_data_max = PAGE_SIZE;
! static int saved_data_order = 0;

  static int remember_open(struct inode *the_inode, struct file *f)
  {
--- 36,42 ----
  static char *saved_data = NULL;
  static unsigned long saved_data_len = 0;
  static int saved_data_max = PAGE_SIZE;
! static int saved_data_order = 2;

  static int remember_open(struct inode *the_inode, struct file *f)
  {
***************
*** 87,92 ****
--- 87,94 ----
                  saved_data = (char *) page_address(saved_data_page);
                  saved_data_len = 0;

+                 pr_info("Allocation Size: %d\n", (int) PAGE_SIZE*(1 << saved_data_order));

                  pr_info("saved_data at kernel virtual address %lx",
                          (unsigned long) saved_data);
                  pr_info("saved_data_page page struct at address %lx",

################
TESTING & OUTPUT
################

To verify that this is 16K of storage I've added a kernel log print statement that displays the new allocation size based on saved_data_order.
This the storage size result of changing saved_data_order to 2:

Mar 23 20:51:20 COMPXXXX kernel: [82346.417276] Allocation Size: 16384

And 16384 Bytes (in binary), is exactly 16 Kilobytes.



9B. For allocating memory when data is first written to the remember module, there are no changes that need to be made.
This is because init_saved_data() already has the following check to see if memory has already been allocated:

if (saved_data) {
	pr_err("Remember: saved_data already initialized!");

To verify this, you simply have the complete two writes to /dev/remember:

student@COMPXXXX:~/Assignments/A3$ echo "Hello World" > /dev/remember
student@COMPXXXX:~/Assignments/A3$ echo "Hello World" > /dev/remember

and monitor the kernel logs:

Mar 23 23:28:25 COMPXXXX kernel: [91770.755736] Remember: device registered using major 243.
Mar 23 23:28:32 COMPXXXX kernel: [91778.356968] Remember: device opened
Mar 23 23:28:32 COMPXXXX kernel: [91778.357005] Remember: allocating data page
Mar 23 23:28:32 COMPXXXX kernel: [91778.357010] saved_data at kernel virtual address ffff9867b9d8a000
Mar 23 23:28:32 COMPXXXX kernel: [91778.357013] saved_data_page page struct at address fffff4e001e76280
Mar 23 23:28:32 COMPXXXX kernel: [91778.357016] Remember: write saving data, 12 bytes
Mar 23 23:28:32 COMPXXXX kernel: [91778.357024] Remember: device closed
Mar 23 23:28:48 COMPXXXX kernel: [91794.412620] Remember: device opened
Mar 23 23:28:48 COMPXXXX kernel: [91794.412662] Remember: allocating data page
Mar 23 23:28:48 COMPXXXX kernel: [91794.412664] Remember: saved_data already initialized!               <------No memory allocations take place because memory was already allocated.
Mar 23 23:28:48 COMPXXXX kernel: [91794.412669] Remember: write saving data, 12 bytes
Mar 23 23:28:48 COMPXXXX kernel: [91794.412694] Remember: device closed

The kernel logs in the base code show "saved_data already initialized" when memory has already been allocated and the second (or more) write still takes place.

For freeing memory when zero bytes are written to /dev/remember or when the remember module is unloaded, a very small modification is necessary:

####################
MODULE MODIFICATIONS
####################

*** rememberog.c        2019-03-22 16:12:05.708000000 -0400
--- remember9b.c        2019-03-25 22:00:13.364000000 -0400
***************
*** 112,122 ****

          if (*offset > 0) {
                  pr_info("Remember: write nonzero offset, aborting");
!
                  return 0;
          }

-         free_saved_data();
          init_saved_data();

          if (len > saved_data_max) {
--- 112,121 ----

          if (*offset > 0) {
                  pr_info("Remember: write nonzero offset, aborting");
!                 free_saved_data();
                  return 0;
          }

          init_saved_data();

          if (len > saved_data_max) {

You have to be sure to free_saved_data() when the offset is greater than or equal to zero because that is the circumstance where 0 bytes are written.

For freeing memory when the module is unloaded:

Once again, there is nothing to be done here, because free_saved_data() is already there in the __exit() function in the base code.



9C. Assuming you have kept the modifications from the previous question, to preserve data across writes such that a shorter write preserves data from a previous write longer write, here are the modifications necessary:

####################
MODULE MODIFICATIONS
####################

*** rememberog.c        2019-03-22 16:12:05.708000000 -0400
--- remember.c  2019-03-25 22:07:34.084000000 -0400
***************
*** 112,122 ****

          if (*offset > 0) {
                  pr_info("Remember: write nonzero offset, aborting");
!
                  return 0;
          }

-         free_saved_data();
          init_saved_data();

          if (len > saved_data_max) {
--- 112,121 ----

          if (*offset > 0) {
                  pr_info("Remember: write nonzero offset, aborting");
!                 free_saved_data();
                  return 0;
          }

          init_saved_data();

          if (len > saved_data_max) {
***************
*** 126,132 ****
          pr_info("Remember: write saving data, %ld bytes", len);

          result = copy_from_user(saved_data, buf, len);

!         saved_data_len = len;

          *offset = len;

--- 125,132 ----
          pr_info("Remember: write saving data, %ld bytes", len);

          result = copy_from_user(saved_data, buf, len);

!         if (saved_data_len < len) saved_data_len = len;

          *offset = len;

#######
TESTING
#######

To test this, you need pass in a longer write, followed by a shorter write, to /dev/remember, and when you cat the device the shorter write should be preserved:

student@COMPXXXX:~/Assignments/A3$ echo "Writing out a longer write to test" > /dev/remember
student@COMPXXXX:~/Assignments/A3$ echo "shorter write" > /dev/remember
student@COMPXXXX:~/Assignments/A3$ cat /dev/remember
shorter write
longer write to test
	
9D. Assuming you have kept the modifications from the previous question, to allow writes to non-zero offsets, the modifications from 9C must be included and the code in remember_write() must be changed to the following:

####################
MODULE MODIFICATIONS
####################

*** rememberog.c        2019-03-22 16:12:05.708000000 -0400
--- remember9d.c        2019-03-26 16:39:37.100000000 -0400
***************
*** 111,122 ****
          unsigned long result;

          if (*offset > 0) {
!                 pr_info("Remember: write nonzero offset, aborting");
!
!                 return 0;
          }

-         free_saved_data();
          init_saved_data();

          if (len > saved_data_max) {
--- 111,129 ----
          unsigned long result;

          if (*offset > 0) {
!
!		pr_info("Current offset: %lld\n", *offset);                           <---------Shows the current offset position.
!
!               if ((*offset + len) > saved_data_max){
!                       len = (saved_data_max - *offset);
!			pr_info("Writing %ld bytes", len);                            <---------Shows how many bytes we are writing in the current read call.
!                       result = copy_from_user((saved_data + *offset), buf, len);
!                       *offset += len;
!                       saved_data_len = *offset;
!                       return 0;
!               }
!               result = copy_from_user((saved_data + *offset), buf, len);
!               *offset += len;
!               saved_data_len = *offset;
!               return len;
          }

          init_saved_data();

          if (len > saved_data_max) {
***************
*** 126,132 ****
          pr_info("Remember: write saving data, %ld bytes", len);

          result = copy_from_user(saved_data, buf, len);
!         saved_data_len = len;

          *offset = len;

--- 133,140 ----
          pr_info("Remember: write saving data, %ld bytes", len);

          result = copy_from_user(saved_data, buf, len);
!
!         if (saved_data_len < len) saved_data_len = len;

          *offset = len;

#######
TESTING
#######

To test that remember_write() will allow to non-zero offsets, you just have to put in two simple print statements to track the offset position/bytes writing:

pr_info("Current offset: %lld\n", *offset);
pr_info("Writing %ld bytes", len);

Then use less to read in a large file piece-by-piece like the remember module:

student@COMPXXXX:~/Assignments/A3$ less remember.c > /dev/remember

You will notice the offset will be incremented slowly up until saved_data_max (PAGE_SIZE = 4096). At that point writing stops:

Mar 26 18:31:06 COMPXXXX kernel: [  536.379891] Remember: write saving data, 1023 bytes
Mar 26 18:31:06 COMPXXXX kernel: [  536.379917] Current offset: 1023
Mar 26 18:31:06 COMPXXXX kernel: [  536.379918] Writing: 1023 bytes
Mar 26 18:31:06 COMPXXXX kernel: [  536.379941] Current offset: 2046
Mar 26 18:31:06 COMPXXXX kernel: [  536.379942] Writing: 1023 bytes
Mar 26 18:31:06 COMPXXXX kernel: [  536.379963] Current offset: 3069
Mar 26 18:31:06 COMPXXXX kernel: [  536.379964] Writing: 1023 bytes
Mar 26 18:31:06 COMPXXXX kernel: [  536.379985] Current offset: 4092
Mar 26 18:31:06 COMPXXXX kernel: [  536.379986] Writing 4 bytes
Mar 26 18:31:06 COMPXXXX kernel: [  536.380063] Current offset: 4096
Mar 26 18:31:06 COMPXXXX kernel: [  536.380065] Writing 0 bytes
Mar 26 18:31:06 COMPXXXX kernel: [  536.380077] Current offset: 4096
Mar 26 18:31:06 COMPXXXX kernel: [  536.380079] Writing 0 bytes
Mar 26 18:31:06 COMPXXXX kernel: [  536.380226] Remember: device closed
