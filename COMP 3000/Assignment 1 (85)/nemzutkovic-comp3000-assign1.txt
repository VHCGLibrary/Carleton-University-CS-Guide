COMP 3000 Assignment 1
Nemanja (Nem) Zutkovic
101085982
January 29, 2019

Collaborator: Will Mahler
Other Resources Used: Splitting Strings in C (https://www.geeksforgeeks.org/how-to-split-a-string-in-cc-python-and-java/)

1. When running a program from 3000shell, if you navigate to /proc/<3000shell pid>/fd and do the ls -l command, the program gets /dev/pts/<#> for file descriptor 0, 1 and 2. 

student@COMPXXXX:/proc$ cd 24080
student@COMPXXXX:/proc/24080$ cd fd
student@COMPXXXX:/proc/24080/fd$ ls -l
total 0
lrwx------ 1 student student 64 Jan 26 11:41 0 -> /dev/pts/1
lrwx------ 1 student student 64 Jan 26 11:41 1 -> /dev/pts/1
lrwx------ 1 student student 64 Jan 26 11:41 2 -> /dev/pts/1

2. The parent process no longer waits for the child/background process to finish - the wait() call was meant to let the child process finish. With this in effect, the results are displayed immediately and regular commands now seem to behave like they are run in the background.

3. 3000shell would have no way to deal with pid errors. The error would not be printed to the screen (errno) and the child process wouldn't terminate.
### SOLUTION ### 3000shell would behave the same as before unless execve fails. Then, instead of printing the error, the execve would fail silently.

4. The setup_comm_fn() in line 167 passes in the pid string (from the struct pointer e) and an empty char array of 512 bytes. setup_comm_fn() then takes the empty string passed in and concatentates "/proc" + "/" + <pid> + "/" + "comm" to form the following new char array: "/proc/<pid>/comm".

5. Yes, system calls are used to set signal handlers. This is evident from sigaction() on lines 245 and 249 in 3000. These calls trigger a rt_sigaction() system call which is responsible for "[changing] the action taken by a process on receipt of a specific signal" (man pages).
   Evident in the strace output when starting up 3000shell between the dotted lines:

strace ./3000shell
execve("./3000shell", ["./3000shell"], 0x7ffe512c9920 /* 21 vars */) = 0
brk(NULL)                               = 0x555ebf5de000
access("/etc/ld.so.nohwcap", F_OK)      = -1 ENOENT (No such file or directory)
access("/etc/ld.so.preload", R_OK)      = -1 ENOENT (No such file or directory)
openat(AT_FDCWD, "/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=54059, ...}) = 0
mmap(NULL, 54059, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fcb4da6e000
close(3)                                = 0
access("/etc/ld.so.nohwcap", F_OK)      = -1 ENOENT (No such file or directory)
openat(AT_FDCWD, "/lib/x86_64-linux-gnu/libc.so.6", O_RDONLY|O_CLOEXEC) = 3
read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\260\34\2\0\0\0\0\0"..., 832) = 832
fstat(3, {st_mode=S_IFREG|0755, st_size=2030544, ...}) = 0
mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fcb4da6c000
mmap(NULL, 4131552, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7fcb4d464000
mprotect(0x7fcb4d64b000, 2097152, PROT_NONE) = 0
mmap(0x7fcb4d84b000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1e7000) = 0x7fcb4d84b000
mmap(0x7fcb4d851000, 15072, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fcb4d851000
close(3)                                = 0
arch_prctl(ARCH_SET_FS, 0x7fcb4da6d500) = 0
mprotect(0x7fcb4d84b000, 16384, PROT_READ) = 0
mprotect(0x555ebf434000, 4096, PROT_READ) = 0
mprotect(0x7fcb4da7c000, 4096, PROT_READ) = 0
munmap(0x7fcb4da6e000, 54059)           = 0
-----------------------------------------------------------------------------------------------------------------------------
rt_sigaction(SIGCHLD, {sa_handler=0x555ebf233dca, sa_mask=[], sa_flags=SA_RESTORER, sa_restorer=0x7fcb4d4a2f20}, NULL, 8) = 0
rt_sigaction(SIGHUP, {sa_handler=0x555ebf233dca, sa_mask=[], sa_flags=SA_RESTORER, sa_restorer=0x7fcb4d4a2f20}, NULL, 8) = 0
-----------------------------------------------------------------------------------------------------------------------------
fstat(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(136, 0), ...}) = 0
brk(NULL)                               = 0x555ebf5de000
brk(0x555ebf5ff000)                     = 0x555ebf5ff000
fstat(0, {st_mode=S_IFCHR|0620, st_rdev=makedev(136, 0), ...}) = 0
write(1, "student $ ", 10student $ )              = 10
read(0,

6. No, find_env() does not generate any system calls. Lines 253 and 254 call find_env(), which is done just after sigaction() calls and just before the prompt appears. Seperated by dotted lines you will see the section where any system calls for find_env() are supposed to take place. 
   The only two system calls that take place are fstat() and brk(), and they refer to returning information about a file and changing the data segment size - nothing related to environment variables. In addition to this, if you remove the find_env() calls from 3000shell the same strace output is seen.

strace ./3000shell
execve("./3000shell", ["./3000shell"], 0x7ffe512c9920 /* 21 vars */) = 0
brk(NULL)                               = 0x555ebf5de000
access("/etc/ld.so.nohwcap", F_OK)      = -1 ENOENT (No such file or directory)
access("/etc/ld.so.preload", R_OK)      = -1 ENOENT (No such file or directory)
openat(AT_FDCWD, "/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=54059, ...}) = 0
mmap(NULL, 54059, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fcb4da6e000
close(3)                                = 0
access("/etc/ld.so.nohwcap", F_OK)      = -1 ENOENT (No such file or directory)
openat(AT_FDCWD, "/lib/x86_64-linux-gnu/libc.so.6", O_RDONLY|O_CLOEXEC) = 3
read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\260\34\2\0\0\0\0\0"..., 832) = 832
fstat(3, {st_mode=S_IFREG|0755, st_size=2030544, ...}) = 0
mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fcb4da6c000
mmap(NULL, 4131552, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7fcb4d464000
mprotect(0x7fcb4d64b000, 2097152, PROT_NONE) = 0
mmap(0x7fcb4d84b000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1e7000) = 0x7fcb4d84b000
mmap(0x7fcb4d851000, 15072, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fcb4d851000
close(3)                                = 0
arch_prctl(ARCH_SET_FS, 0x7fcb4da6d500) = 0
mprotect(0x7fcb4d84b000, 16384, PROT_READ) = 0
mprotect(0x555ebf434000, 4096, PROT_READ) = 0
mprotect(0x7fcb4da7c000, 4096, PROT_READ) = 0
munmap(0x7fcb4da6e000, 54059)           = 0
rt_sigaction(SIGCHLD, {sa_handler=0x555ebf233dca, sa_mask=[], sa_flags=SA_RESTORER, sa_restorer=0x7fcb4d4a2f20}, NULL, 8) = 0
rt_sigaction(SIGHUP, {sa_handler=0x555ebf233dca, sa_mask=[], sa_flags=SA_RESTORER, sa_restorer=0x7fcb4d4a2f20}, NULL, 8) = 0
------------------------------------------------------------------
fstat(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(136, 0), ...}) = 0
brk(NULL)                               = 0x555ebf5de000
brk(0x555ebf5ff000)                     = 0x555ebf5ff000
fstat(0, {st_mode=S_IFCHR|0620, st_rdev=makedev(136, 0), ...}) = 0
------------------------------------------------------------------
write(1, "student $ ", 10student $ )              = 10
read(0,

7. The assembly code corresponding to the allocation of pattern[] on line 63 is in the following section:

find_env:
.LFB74:
        .cfi_startproc
        pushq   %r15
        .cfi_def_cfa_offset 16
        .cfi_offset 15, -16
        pushq   %r14
        .cfi_def_cfa_offset 24
        .cfi_offset 14, -24
        pushq   %r13
        .cfi_def_cfa_offset 32
        .cfi_offset 13, -32
        pushq   %r12
        .cfi_def_cfa_offset 40
        .cfi_offset 12, -40
        movq    %rsi, %r12
        pushq   %rbp
        .cfi_def_cfa_offset 48
        .cfi_offset 6, -48
        pushq   %rbx
        .cfi_def_cfa_offset 56
        .cfi_offset 3, -56
	------------------
        subq    $152, %rsp
	------------------
        .cfi_def_cfa_offset 208
        movq    %fs:40, %rax
        movq    %rax, 136(%rsp)
        xorl    %eax, %eax
        jmp     .L29
        .p2align 4,,10
        .p2align 3

I know my answer is correct because we are in the find_env function call and there is a subq $152 assembly call (separated by dotted lines), which refers to allocating space on the stack.
Additionally, when you manually add up the bytes of each variable declared (4+4+4+1+128+8 = 149 bytes) you notice that these values are very close to one another.

8. Execve can do this because it does not close open file descriptors - the file descriptors are in the kernel. No, because execve first copies over the opened file descriptors to the new process and then removes the old process afterwards.

9. The SA_RESTART flag is interpreted by the code running in the kernel. This is because if you comment out the SA_RESTART flag, there is a difference in behaviour (30000shell terminates every time a process is run in the background), yet the system calls were the same. 
   We know that if there is no difference in system calls, but there is a difference in behaviour, the kernel is responsible and not the code.
### SOLUTION ### THERE WAS ACTUALLY AN ADDITIONAL READ() SYSTEM CALL DONE, WHICH MEANS THAT THE SA_RESTART FLAG IS INTERPRETED BY THE CODE RUNNING IN THE PROCESS. IN PARTICULAR, IT IS HANDLED BY THE C LIBRARY.

10. Code for the listfiles() function and changes to main() via diff -c:

+ void listfiles(){
+         DIR           *filedirectory;
+         struct dirent *dir;
+
+         filedirectory = opendir(".");
+         while(dir = readdir(filedirectory)){
+                 if(dir == NULL){
+                         break;
+                 }
+                 if(strcmp(dir->d_name, "..") == 0 ||
+                    strcmp(dir->d_name, ".") == 0){
+                         continue;
+                 }
+                 printf("%s ", dir->d_name);
+         }
+         printf("\n");
+         closedir(filedirectory);
+ }
+
  int main(int argc, char *argv[], char *envp[])
  {
      char buffer[BUFFER_SIZE];
***************
*** 275,280 ****
--- 294,304 ----
                      continue;
              }

+           if (!strcmp(args[0], "listfiles")){
+                   listfiles();
+                   continue;
+           }
+
              background = 0;
              if (strcmp(args[nargs-1], "&") == 0) {
                      background = 1;

Evidently, the "+" signs show the addition of the listfiles command implementation. No sorting, spacing and color coding of strings was implemented as it was not specified in the assignment specs.

11. Code for the infile() function and changes to main() via diff -c:

+ void infile(const char *file){
+     pid_t pid;
+     int fd = open(file, O_RDONLY);
+
+     if ((pid = fork()) < 0) {
+         perror("fork");
+     }
+     else if (!pid) {
+         dup2(fd, STDIN_FILENO);
+         close(fd);
+         execlp("/usr/bin/bc", "bc", (char *)0);
+         perror("exec");
+     }
+     else {
+         close(fd);
+         getchar();
+     }
+ }
+

  int main(int argc, char *argv[], char *envp[])
  {
***************
*** 276,281 ****
--- 295,307 ----
                      continue;
              }

+           if (!strcmp(args[0], "bc") && argc >= 1){
+                   const char *arg1 = strtok(args[1], "=");
+                   const char *arg2 = strtok(NULL, "=");
+                   infile(arg2);
+                   continue;
+           }
+
              background = 0;
              if (strcmp(args[nargs-1], "&") == 0) {
                      background = 1;

Evidently, the "+" signs show the addition of the infile= command implementation. Extensive error checking on user input was not taken into consideration as it was not explicit in the assignment specs. This code assumes the user will input something in the following format: bc infile=<file>.