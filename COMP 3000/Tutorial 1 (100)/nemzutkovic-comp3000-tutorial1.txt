COMP 3000: Tutorial 1

Function calls, library calls, and system calls (hello.c):
1. After compilation and running hello-dyn, it prints "Hello world!".
2. hello-static is much larger in size than hello-dyn, and this is because:
 - Static linking takes all the dependencies (and more), and puts them in the binary at compile time.
 - Whereas dynamic linking does this at runtime.
3. hello-dyn generates more system calls.
4. hello-dyn generates more library calls.
5. student owns hello.c and hello-dyn. They are part of the student group. The owner and group have the same permissions.
6. Look up the following in the man pages: execve, brk, arch_prctl, uname(2), readlink(2), access, fstat, write(2), exit_group

Function calls, library calls, and system calls (syscall-hello.c):
- Same exact answers occur for syscall-hello.c as hello.c

Comparing C and Assembly (hello.c):
1. hello-static defines more symbols.
2. hello.o was produced. It produces:
 - U _GLOBAL_OFFSET_TABLE_
 - r .LC0
 - T main
 - U puts
3. hello.s was produced.
 - call puts@PLT
 - ret
 - pushq %rbp
 - No pop
 - subq $16, %rsp
 - No syscall
4. Only shows main execution. Different assembly formating. Hexadecimal output appears, which show virtual memory addresses.
5. hello-static and hello-dyn show different headers.
6. MUCH different contents of object files for the statically linked executable than the dynamically linked executable.
7. man gcc (-v): We are shown the commands executed to run the stages of compilation. Also prints the version number of the compiler driver program and of the preprocessor and the compiler proper.

Comparing C and Assembly (syscall-hello.c):
1. Same as hello.c
2. syscallhello.o was produced. It produces:
 - U _GLOBAL_OFFSET_TABLE_
 - r .LC0
 - T main
 - U syscall
3. syscallhello.s was produced.
 - call syscall@PLT
 - ret
 - pushq %rbp
 - No pop
 - subq $32, %rsp
 - syscall@PLT
4-7. Same as hello.c

Creating processes, running executables:
1. csimpleshell simulates a shell terminal.
2. See csimpleshell.c code.
Stopping Here