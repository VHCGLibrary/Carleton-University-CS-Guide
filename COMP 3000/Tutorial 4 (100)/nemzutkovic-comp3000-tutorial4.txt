COMP 3000: Tutorial 4

Creating, Mounting, and Unmounting Filesystem:
1. The numbers appearing in the left column are inode numbers.
2. The logical file size of foo is 268435456B or 268MB. It takes up 262148 blocks or KB on disk.
3. After running mkfs.ext4, foo now takes up much less space (336 blocks or KB) on disk.
- mkfs makes foo into a filesystem.
4. The command shows the super block and block group info for the foo filesystem.
- dumpe2fs prints the super block and block group information for the filesystem present on device.
5. fsck.ext4 foo is the command you run to check the filesystem in foo for errors. After running it shows foo is clean.
6. Running sudo mount foo /mnt, means that we are mounting the foo file system on the /mnt directory. Foo's file should be accessible there, as that was the mounting point.
7. /dev/loop0 is mounted on /mnt. /dev/loop0 is a device file and more specifically, it is a loop device. This means the file is a block device.
8. Changing ownership of /mnt to specified user/group. In this case, student for both user and group.
9. rsync is basically a copy tool, but it is very versatile. It is widely used for backups, mirroring and improved copy command for every day use.
   -a: A quick way of saying you want recursion and want to preserve almost everything.
   -v: Increases the amount of information you are given during the transfer. Shows you what files are being transferred.
   /etc: This was the source.
   /mnt: This was the destination.
   errors: Did receive an rsync error. Some files were not transferred. Probably should have performed an rsync call with root privileges.
10. /dev/loop0 is no longer mounted on /mnt. You can no longer access the files in /etc and /lost+found that you could after you mounted foo.
11. conv=notrunc means dd will not truncate the ouput file.
12. The error we get is: wrong fs type, bad option, bad superblock on /dev/loop0, missing codepage or helper program, or other error.
13. We need to run mkfs.ext4 again to make foo mountable again. The reason we need to do this is because we added more zero's to the filesystem.
14. The logical file size of bar is 1073741824B or 1.0GB. It consumes 0 blocks or KB on disk. This very different from foo, because bar is essentially empty.
15. After making bar a ext4 filesystem the logical file size stays the same, but the space consumed on disk increases dramatically from 0 to 600 blocks or KB.

SSH & SSHFS:
Completed Setup
Completed Remote filesystems using sshfs
Completed Pulic key authentication and ssh

Tasks:
Stopping here