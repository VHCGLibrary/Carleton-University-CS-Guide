/**Abstract Thing class 
  * Things are anything used within the game to modify Character attributes
  Things are found all through out the world*/
import java.util.Random; 
import javax.swing.*;
import java.awt.*;

public abstract class Thing{

  private String thingType; //The type of thing it is which will dictate the behaviour of the concrete object Thing
  private float speed = 0; // Things can't move
  private String name; // Name of the thing
  private int defaultHealth = 1; // the default health should be treated as final
  private int currentHealth = 1; // current health of the thing trivially low
  private int baseDamage = 0; // the base damage output of the thing
  private String race = "Thing"; // the race (ie. orc, goblin, elf, human)
  private boolean justAttacked = false;
  
  private int width = 20; // width of the rectangle - Things are square
  private int height = 20; // height of the rectangle
  
  private PVector position = new PVector(); // upper left corner of the rectangle
  private PVector velocity = new PVector(); // the velocity of the thing
  private PVector direction = new PVector(); // the direction that the thing is travelling in 
  private PVector cPosition = new PVector(); // the center of the rectangle
  private Target target; // the things target
  
  public Thing(float xPos, float yPos, float speed, String name, String thingType){
    position.x = xPos; // x coordinate of the upper left of the rectangle
    position.y = yPos; // y coordinate of the upper left of the rectangle
    cPosition.x = xPos+(width/2); // x coordinate of the middle of the rectangle
    cPosition.y = yPos+(height/2); // y coordinate of the middle of the rectangle
    this.name = name; // name of the thing
    this.thingType = thingType;
    this.race = race; // race of the thing
  }
  
  /**Effect on chararacter atttribute
    * Every Thing Object must impact the character C Object in some way uppon collision*/
  public abstract void characterMod(Character c);
  @Override
  public String toString(){
    return this.name + " : " + this.thingType;
  }

  public abstract void paint(Graphics g); // abstract method from which each character will be drawn onto the screen
  public String getName() { return name; } // return name of the thing
  public void setName(String name) { this.name = name; } // set name of thing
  public int getHealth() { return this.currentHealth; } // return current health of the thing
  public void attacked(int damage) { this.currentHealth = this.currentHealth - damage; } // deal damage to the thing
  public int getDamage() { return this.baseDamage; } // return base damage of the thing
  public int getWidth() { return width; } // return width of the thing
  public void setWidth(int width) { this.width = width; } // set width of the thing  
  public int getHeight() { return height; }  // get height of the thing
  public void setHeight(int height) { this.height = height; } // set height of the thing
  public void setxVel(int xVel) { this.velocity.x = xVel; } // set x velocity of the thing
  public void setyVel(int yVel) { this.velocity.y = yVel; }// set y velocity of the thing
  public PVector getVel() { return velocity; }  // return velocity as a PVector
  public PVector getDir() { return direction; } // return direction as a PVector
  public float getSpeed() { return speed; }  // return speed of the thing
  public String getRace() { return race; } // return the race of the thing
  public boolean getJustAttacked() { return justAttacked; } // return the boolean state of whether the character has attacked or not
  public void setJustAttacked(boolean b) { justAttacked = b; }
  
  //Deal with x plane
  public float getxPos() { return position.x; } // return the upper left x position of the thing
  public void setxPos(float x) { // set the x pos of the upper left and middle of the thing
    this.position.x = x;
    this.cPosition.x = position.x+(width/2);
  }
  
  //Deal with the y plane
  public float getyPos() { return position.y;} // return the upper left y position of the thing
  public void setyPos(float y) { // set the y pos of the upper left and middle of the thing
    this.position.y = y;
    this.cPosition.y = position.y+(height/2);
  }
  
  public PVector getPos() { return position; }   // return the upper left position of the character as a PVector
  public PVector getCPos() { return cPosition; } // return the center position of the character as a PVector
  
  public void setTarget(Character c) { // set the target of the character as another character
    target = null;
    target = new Target(c);
  }  
  public void setTarget(PVector v) { // set the target of the thing
    target = null;
    target = new Target(v);
  }  
  public Target getTarget() { return target; } // return the target as a target
  
  public void setDirection(float theta_radians) { // set the direction the thing is headed in using radians to calculate the angle
    direction.x = (float) Math.cos(theta_radians); // set the x direction
    direction.y = (float) Math.sin(theta_radians); // set the y direction
    if (direction.mag()>0) { // if the magnitude of the direction vector is greater than zero
      direction.normalise(); // turn the direction vector into a unit vector
    }
  }  
  
  public void updateMovement() { // update the position of the thing
    setDirection(getCPos().angleBetween((getTarget().getTarget()))); // set the direction of the thing by using the angle between the center of the character and the target
    getVel().x = getDir().x * getSpeed(); // set the x velocity of the thing based on direction and speed
    getVel().y = getDir().y * getSpeed(); // set the y velocity of the thing based on direction and speed
    getPos().x += getVel().x; // set the x position of the thing by adding x velocity
    getPos().y += getVel().y; // set the y position of the thing by adding y velocity
    getCPos().x += getVel().x; // set the x center position of the thing by adding the x velocity
    getCPos().y += getVel().y; // set the y center position of the thing by addind the y velocity
  }  
  
  public void checkCollisionWithRoom() { // check for collisions with the border of the room
    if (position.x < 0) { // position of character is to the left of the room
      setxPos(1); // set x position inside of room on far left side
      if (!race.equals("Orc")) { // makes sure that the race of the thing is not an orc
        setTarget((new PVector()).random(getCPos())); // give the thing a new random direction
      }  
    }
    if(position.x+width > 1000){ // position of thing is to the right of the room
      setxPos(1000-width); // set x position of the thing inside of room on the far right side
      if (!race.equals("Orc")) { // makes sure that the race of the thing is not an orc
        setTarget((new PVector()).random(getCPos())); // give the thing a new random direction
      } 
    }
    if(position.y < 0){ // position of thing is to the top of the room
      setyPos(1); // set y position of thing to the top side of the room
      if (!race.equals("Orc")) { // makes sure that the race of the thing is not an orc
        setTarget((new PVector()).random(getCPos())); // give the character a new random direction
      } 
    }
    if(position.y+height > 1000){ // position of thing is to the bottom of the room
      setyPos(1000-height); // set y position of thing to the bottom side of the room
      if (!race.equals("Orc")) { // makes sure that the race of the thing is not an orc
        setTarget((new PVector()).random(getCPos())); // give the thing a new random direction
      } 
    }
  }
    
  public abstract void move(); // abstract method to move the thing, dealt by the individual thing
  public abstract boolean pathFinding(); // abstract method to return whether the thing is currently tracking, dealt by the individual character
  
  //public abstract void checkCollision();
}